{
  "name": "node-linkedlist",
  "version": "0.1.4",
  "description": "Double linked list features",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "ring": "2.1.0"
  },
  "devDependencies": {
    "should": "*",
    "async": "^2.0.0-rc.4"
  },
  "scripts": {},
  "keywords": [
    "unary tree",
    "structures",
    "lists",
    "linked list",
    "doubly linked list"
  ],
  "author": {
    "name": "Sven Mueller",
    "email": "svenmue@localdomain.org"
  },
  "license": "LGPL-3.0",
  "readme": "<h1>LinkedList</h1>\n\nAn implementation of the concept of double linked lists.\n\n<h2>Documentation</h2>\n\n<h3>How to use</h3>\n\nQuick example to get an instance of the linked list:\n```javascript\n  var LinkedList = require('node-linkedlist')\n    , User = require('../Object/User')\n    , list = LinkedList.Create(User);\n     \n    ... \n  var user = User.Create();\n  list.add(user, function(err, listObj) {\n    ... \n    ... \n  });\n```\n\n<h3>Linked list</h3>\n\n<a name=\"size\">\n<h4>size</h4>\n\nThe number of nodes linked to each other in a row.\n\n<strong>Example</strong>\n\n```javascript\nvar list = require(\"node-linkedlist\").Create()\n...\n  console.log(list.size);\n```\n\n<a name=\"setDataType\">\n<h4>setDataType(dataType)</h4>\n\nYou are not fixed to use ''LinkedList'' as it is with the internal standard node. You can use it to chain\nyour own business objects too. The only thing you have to do is to extend the standard node object and publish\nthe constructor of you class to the ''LinkedList'' instance.\nTo publish your own node class without inherit from the standard node you only have to implement the methods that are described at the\nbottom of the documentation under <a href=\"#node\">List node</a>\n<br/>\n<br/>\n<strong>Arguments</strong>\n\n* `dataType` (constructor) - The constructor of the class extending the standard node object.\n* `return` (LinkedList) - The list itself is returned.\n\n<strong>Example</strong>\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , list = LinkedList.Create()\n  , User = require('<path>/User');\n\n  list.setDataType(User);\n```\n\nAlternatively you can publish the constructor directly on create the ''LinkedList'' instance.\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , User = require('<path>/User')\n  , list = LinkedList.Create(User);\n\n  ...\n  ...\n```\nIt is important to know that if you publish a constructor to the ''LinkedList'' instance after adding nodes all of them are lost because\npublishing requires to set a new first node of the published constructor. It is planned to realize a mixed-mode of nodes which have\nimplemented a standard interface.\n\n<a name=\"add\">\n<h4>add(data[, callback])</h4>\n\nAdd a new node to the end of the list.\n<br/>\n<br/>\n<b>Arguments</b>\n\n* `data` (string) - The data to add to the list. It can be a node object too.\n* `callback` (function) - The callback function with parameter `err` and `listObj`.\n* `return` (listObj) - The `LinkedList` instance itself.\n\n<b>Example</b>\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , list = LinkedList.Create()\n  , node = list.node;\n\n  ...\n  list.add('FirstName', function(err, listObj) {\n    if (err) console.log(err);\n    else {\n      console.log(listObj.size);\n    }\n  });\n```\n\n<a name=\"searchBy\">\n<h4>searchBy(property, value)</h4>\n\nSearch a node by one of its properties. If the list contains extended standard nodes it is required to implement\na getter method like ''getFirstName'' or ''getFirstname''.\n<br/>\n<br/>\n<b>Arguments</b>\n\n* `property` (string) - The nodes property to search in the value.\n* `value` (*) - The value to search in the given property.\n* `return` (node) - The node you searched or null if it can't be found.\n\n<b>Example</b>\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , User = require('<path>/User')\n  , list = LinkedList.Create(User);\n\n  ...\n  list.searchBy('FirstName', \"Warden\");\n```\n\n<a name=\"get\">\n<h4>get(position[, raw])</h4>\n\nGet a node by a given position.\n<br/>\n<br/>\n<b>Arguments</b>\n\n* `position` (number) - The position of the node that is wanted. If the position less equal '0' or higher than the list size\n                        the first or last node is returned.\n* `raw` (boolean) - A flag to get the node itself instead of the value only. Default is false to get only the value.\n* `return` (Node) - The node at the position or first/last node if the position is less/equal 0 or higher than list size.\n\n<b>Example</b>\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , list = LinkedList.Create();\n\n  ...\n  var node = list.get(54, true);\n```\n\n<a name=\"delete\">\n<h4>delete(position)</h4>\n\nDelete a node from given position.\n<br/>\n<br/>\n<b>Arguments</b>\n\n* `position` (number) - The position of the node which has to be removed.\n* `return` (LinkedList) - The list itself is returned.\n\n<b>Example</b>\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , list = LinkedList.Create();\n\n  ...\n  list.delete(54, true);\n```\n\n<a name=\"first\">\n<h4>first()</h4>\n\nGet the first node of the list.\n<br/>\n<br/>\n<b>Arguments</b>\n\n* `return` (node) - The first node in the list.\n\n<b>Example</b>\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , list = LinkedList.Create();\n\n  ...\n  var firstNode = list.first();\n```\n\n<a name=\"last\">\n<h4>last()</h4>\n\nGet the last node of the list.\n<br/>\n<br/>\n<b>Arguments</b>\n\n* `return` (node) - The last node in the list.\n\n<b>Example</b>\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , list = LinkedList.Create();\n\n  ...\n  var firstNode = list.last();\n```\n\n<a name=\"isStdNode\">\n<h4>isStdNode(node)</h4>\n\nCheck if a node is an instance of the internal standard node.\n<br/>\n<br/>\n<b>Arguments</b>\n\n* `node` (object) - The node that will be compared with the constructor of the standard node.\n* `return` (boolean) - True if the given node is a standard node. Otherwise false is returned.\n\n<b>Example</b>\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , list = LinkedList.Create();\n\n  ...\n  var node = ...;\n  if (list.isStdNode(node)) {\n    ...\n    ...\n  }\n```\n\n<a name=\"clean\">\n<h4>clean()</h4>\n\nRemoves all nodes from the list.\n<br/>\n<br/>\n<b>Arguments</b>\n\n* `return` (LinkedList) - The list itself is returned.\n\n<b>Example</b>\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , list = LinkedList.Create();\n\n  ...\n  list.clean();\n```\n\n<a name=\"toArray\">\n<h4>toArray()</h4>\n\nConverts the list into an array.\n<br/>\n<br/>\n<b>Arguments</b>\n\n* `return` (Array) - All nodes in an array.\n\n<b>Example</b>\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , list = LinkedList.Create();\n\n  ...\n  var nodes = list.toArray();\n  ...\n```\n\n<h3>Iteration over the list</h3>\nTo reduce source code and do not lost performance it is recommended to iterate over the list itself\ninstead of use ''toArray'' and loop over this.\nThe ''LinkedList'' has the standard methods implemented you expect from an iterator.\n\n<a name=\"next\">\n<h4>next()</h4>\n\nGet the next node in the list.\n\n\n<a name=\"hasNext\">\n<h4>hasNext()</h4>\n\nCheck the existence of a next node.\n\n\n<a name=\"previous\">\n<h4>previous()</h4>\n\nGet the previous node in the list.\n\n\n<a name=\"hasPrevious\">\n<h4>hasPrevious()</h4>\n\nCheck the existence of a previous node.\n\n<b>Example</b>\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , list = LinkedList.Create()\n ,  node = null;\n  // Traversing forwards \n  for(node = list.first(); list.hasNext(); node = list.next()) {\n   ... \n   ... \n  }\n  \n  // or backwards\n  for(node = list.last(); list.hasPrevious(); node.previous()) {\n   ... \n   ... \n  }\n```\n\n<h3>List node</h3>\n<a name=\"node\">\n<h4>node [Constructor]</h4>\n\nThe list node is the standard node object used by the linked list internally if no other node constructor is offered.\nYou can get it via the property 'node' of the linked list object.\n<br/>\n<br/>\n<b>Arguments</b>\n\n* No arguments\n\n<b>Example</b>\n\n```javascript\nvar list = require(\"node-linkedlist\").Create()\n  , node = list.node;\n\nvar newNode = node.Create();\n```\n\n<a name=\"setNext\">\n<h4>setNext(nextNode)</h4>\n\nSet another node object as next node to the current one.\n<br/>\n<br/>\n<b>Arguments</b>\n\n* nextNode (object) - A node which has to be referenced as next node.\n\n<b>Example</b>\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , list = LinkedList.Create();\n... \nvar last = list.last()\n  , node = list.node.Create();\n\nnode.setValue({\n  field1: true, \n  field2: 123, \n  field3: {success: true}, \n  field4: \"Everything's fine.\"\n});\n  \nlast.setNext(node);\n...\n```\n\n<a name=\"next\">\n<h4>next()</h4>\n\nGet the next node that is referenced to the current node.\n<br/>\n<br/>\n<b>Arguments</b>\n\n* No argument\n\n<b>Example</b>\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , list = LinkedList.Create();\n... \nvar node = list.first()\n...\nnode = node.next();\n...\n```\n\n<a name=\"hasNext\">\n<h4>hasNext()</h4>\n\nCheck the existence of a next nodes reference.\n<br/>\n<br/>\n<b>Arguments</b>\n\n* No argument\n\n<b>Example</b>\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , list = LinkedList.Create();\n... \nvar node = list.first()\n...\nif (node.hasNext())\n  node = node.next();\n...\n```\n\n<a name=\"setPrevious\">\n<h4>setPrevious(previousNode)</h4>\n\nSet another node object as previous node to the current one.\n<br/>\n<br/>\n<b>Arguments</b>\n\n* previousNode (node) - The node which has to be referenced before current node.\n\n<b>Example</b>\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , list = LinkedList.Create()\n  , node = list.node;\n...\nvar last = node.Create()\n  , newNode = node.Create();\n\nlast.setValue({\n  field1: true, \n  field2: 123, \n  field3: {success: true}, \n  field4: \"Everything's fine.\"\n});\n\nnewNode.setValue(\"Only a small text string...\");\nlast.setPrevious(newNode);\n...\n```\n\n<a name=\"previous\">\n<h4>previous()</h4>\n\nGet the previous node that is referenced to the current node.\n<br/>\n<br/>\n<b>Arguments</b>\n\n* No argument\n\n<b>Example</b>\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , list = LinkedList.Create();\n... \nvar node = list.last()\n...\nnode = node.previous();\n...\n```\n\n<a name=\"hasPrevious\">\n<h4>hasPrevious()</h4>\n\nCheck the existence of a previous nodes reference.\n<br/>\n<br/>\n<b>Arguments</b>\n\n* No argument\n\n<b>Example</b>\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , list = LinkedList.Create();\n... \nvar node = list.last()\n...\nif (node.hasPrevious())\n  node = node.previous();\n...\n```\n\n<a name=\"setValue\">\n<h4>setValue(value)</h4>\n\nSet the value that has to be added to the list. This method is used internally so it is fully transparent\nvia ''list.add(...)'' if you use the standard node.\n<br/>\n<br/>\n<b>Arguments</b>\n\n* value (mixed) - The value that has to be put to a list via a node.\n\n<b>Example</b>\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , list = LinkedList.Create()\n  , Node = list.node;\n... \nvar node = list.last()\n...\nvar newNode = Node.Create();\nnewNode.setValue({message: 'Created new node.'});\nnode.setNext(newNode);\n...\n```\n\n<a name=\"getValue\">\n<h4>getValue()</h4>\n\nGet the value that is stored in a node. This method is used internally so it is fully transparent\nvia ''list.get(position)'' if you use the standard node.\n<br/>\n<br/>\n<b>Arguments</b>\n\n* No argument\n\n<b>Example</b>\n\n```javascript\nvar LinkedList = require(\"node-linkedlist\")\n  , list = LinkedList.Create()\n  , Node = list.node;\n... \nvar node = list.last()\nconsole.log(node.getValue());\n...",
  "readmeFilename": "README.md",
  "gitHead": "b72a0f98fa7e861f2cf4ba0b88afebca71138e04",
  "_id": "node-linkedlist@0.1.3",
  "_shasum": "360b98756ff39c326a2b525e24857f91cc59ef2d",
  "_from": "node-linkedlist@*"
}
